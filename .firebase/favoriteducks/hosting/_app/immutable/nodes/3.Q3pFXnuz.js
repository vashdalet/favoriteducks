import{s as f,d as h}from"../chunks/scheduler.sMD3e7PM.js";import{S as _,i as p,d as l,v as g,j as w,u as v,k as P,l as b,w as j,g as d,m as k,a as y,x,f as C,t as E,y as S}from"../chunks/index.dsD1ntpQ.js";import{C as m}from"../chunks/Collection.j2FBTavz.js";const $="src/routes/[username]/+page.svelte";function r(o){let t,s,c;s=new m({props:{ducks:o[0].ducks},$$inline:!0});const i={c:function(){t=w("main"),v(s.$$.fragment),this.h()},l:function(a){t=P(a,"MAIN",{class:!0});var e=b(t);j(s.$$.fragment,e),e.forEach(d),this.h()},h:function(){k(t,"class","content-center"),h(t,$,7,0,106)},m:function(a,e){y(a,t,e),x(s,t,null),c=!0},p:function(a,[e]){const u={};e&1&&(u.ducks=a[0].ducks),s.$set(u)},i:function(a){c||(C(s.$$.fragment,a),c=!0)},o:function(a){E(s.$$.fragment,a),c=!1},d:function(a){a&&d(t),S(s)}};return l("SvelteRegisterBlock",{block:i,id:r.name,type:"component",source:"",ctx:o}),i}function N(o,t,s){let{$$slots:c={},$$scope:i}=t;g("Page",c,[]);let{data:n}=t;o.$$.on_mount.push(function(){n===void 0&&!("data"in t||o.$$.bound[o.$$.props.data])&&console.warn("<Page> was created without expected prop 'data'")});const a=["data"];return Object.keys(t).forEach(e=>{!~a.indexOf(e)&&e.slice(0,2)!=="$$"&&e!=="slot"&&console.warn(`<Page> was created with unknown prop '${e}'`)}),o.$$set=e=>{"data"in e&&s(0,n=e.data)},o.$capture_state=()=>({Collection:m,data:n}),o.$inject_state=e=>{"data"in e&&s(0,n=e.data)},t&&"$$inject"in t&&o.$inject_state(t.$$inject),[n]}class A extends _{constructor(t){super(t),p(this,t,N,r,f,{data:0}),l("SvelteRegisterComponent",{component:this,tagName:"Page",options:t,id:r.name})}get data(){throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set data(t){throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}export{A as component};
